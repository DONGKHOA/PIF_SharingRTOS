
Demo_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800274c  0800274c  0000374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002754  08002754  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002758  08002758  00003758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800275c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000452c  20000010  0800276c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000453c  0800276c  0000453c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c1f  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001680  00000000  00000000  00009c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000528  00000000  00000000  0000b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016873  00000000  00000000  0000bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008732  00000000  00000000  0002276b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd87  00000000  00000000  0002ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bac24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a20  00000000  00000000  000bac68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000bc688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002700 	.word	0x08002700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002700 	.word	0x08002700

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 f995 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f821 	bl	8000554 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  xTaskCreate(LED1_Task, "LED1_Task", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000512:	2300      	movs	r3, #0
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2303      	movs	r3, #3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	4909      	ldr	r1, [pc, #36]	@ (8000544 <main+0x40>)
 8000520:	4809      	ldr	r0, [pc, #36]	@ (8000548 <main+0x44>)
 8000522:	f001 f9b5 	bl	8001890 <xTaskCreate>
  xTaskCreate(LED2_Task, "LED2_Task", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2304      	movs	r3, #4
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	4906      	ldr	r1, [pc, #24]	@ (800054c <main+0x48>)
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <main+0x4c>)
 8000536:	f001 f9ab 	bl	8001890 <xTaskCreate>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f873 	bl	8000624 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  vTaskStartScheduler();
 800053e:	f001 fb41 	bl	8001bc4 <vTaskStartScheduler>
 8000542:	e7fc      	b.n	800053e <main+0x3a>
 8000544:	08002718 	.word	0x08002718
 8000548:	080006e5 	.word	0x080006e5
 800054c:	08002724 	.word	0x08002724
 8000550:	08000709 	.word	0x08000709

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f8a0 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b27      	ldr	r3, [pc, #156]	@ (800061c <SystemClock_Config+0xc8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a26      	ldr	r2, [pc, #152]	@ (800061c <SystemClock_Config+0xc8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b24      	ldr	r3, [pc, #144]	@ (800061c <SystemClock_Config+0xc8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <SystemClock_Config+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a20      	ldr	r2, [pc, #128]	@ (8000620 <SystemClock_Config+0xcc>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <SystemClock_Config+0xcc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005c8:	2340      	movs	r3, #64	@ 0x40
 80005ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fc29 	bl	8000e30 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f8a2 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005f0:	2390      	movs	r3, #144	@ 0x90
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fe8c 	bl	8001320 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800060e:	f000 f88d 	bl	800072c <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a26      	ldr	r2, [pc, #152]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0xb8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_GPIO_Init+0xb8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <MX_GPIO_Init+0xb8>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <MX_GPIO_Init+0xb8>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_GPIO_Init+0xb8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <MX_GPIO_Init+0xbc>)
 80006b2:	f000 fb89 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_GPIO_Init+0xbc>)
 80006d0:	f000 f9f6 	bl	8000ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <LED1_Task>:

/* USER CODE BEGIN 4 */

static void LED1_Task(void *pvParameters)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <LED1_Task+0x20>)
 80006f2:	f000 fb82 	bl	8000dfa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80006f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fa:	f001 f9e9 	bl	8001ad0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006fe:	bf00      	nop
 8000700:	e7f4      	b.n	80006ec <LED1_Task+0x8>
 8000702:	bf00      	nop
 8000704:	40020c00 	.word	0x40020c00

08000708 <LED2_Task>:
	}
}

static void LED2_Task(void *pvParameters)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000710:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <LED2_Task+0x20>)
 8000716:	f000 fb70 	bl	8000dfa <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800071a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071e:	f001 f9d7 	bl	8001ad0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000722:	bf00      	nop
 8000724:	e7f4      	b.n	8000710 <LED2_Task+0x8>
 8000726:	bf00      	nop
 8000728:	40020c00 	.word	0x40020c00

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800081c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007e8:	f7ff ffea 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	@ (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000812:	f001 ff51 	bl	80026b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe75 	bl	8000504 <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800081c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000828:	0800275c 	.word	0x0800275c
  ldr r2, =_sbss
 800082c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000830:	2000453c 	.word	0x2000453c

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f8f9 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff ff64 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f903 	bl	8000aa6 <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f8d9 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000002c 	.word	0x2000002c

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	@ 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff8e 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff47 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff5c 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff8e 	bl	80009ac <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffb0 	bl	8000a14 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	e159      	b.n	8000d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000adc:	2201      	movs	r2, #1
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f040 8148 	bne.w	8000d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d005      	beq.n	8000b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d130      	bne.n	8000b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4013      	ands	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d017      	beq.n	8000bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d123      	bne.n	8000c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691a      	ldr	r2, [r3, #16]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	08da      	lsrs	r2, r3, #3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3208      	adds	r2, #8
 8000bfe:	69b9      	ldr	r1, [r7, #24]
 8000c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0203 	and.w	r2, r3, #3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80a2 	beq.w	8000d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b57      	ldr	r3, [pc, #348]	@ (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a56      	ldr	r2, [pc, #344]	@ (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b54      	ldr	r3, [pc, #336]	@ (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c62:	4a52      	ldr	r2, [pc, #328]	@ (8000dac <HAL_GPIO_Init+0x2ec>)
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	220f      	movs	r2, #15
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a49      	ldr	r2, [pc, #292]	@ (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d019      	beq.n	8000cc2 <HAL_GPIO_Init+0x202>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <HAL_GPIO_Init+0x2f4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d013      	beq.n	8000cbe <HAL_GPIO_Init+0x1fe>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a47      	ldr	r2, [pc, #284]	@ (8000db8 <HAL_GPIO_Init+0x2f8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00d      	beq.n	8000cba <HAL_GPIO_Init+0x1fa>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a46      	ldr	r2, [pc, #280]	@ (8000dbc <HAL_GPIO_Init+0x2fc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x1f6>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a45      	ldr	r2, [pc, #276]	@ (8000dc0 <HAL_GPIO_Init+0x300>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_GPIO_Init+0x1f2>
 8000cae:	2304      	movs	r3, #4
 8000cb0:	e008      	b.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e004      	b.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e002      	b.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	f002 0203 	and.w	r2, r2, #3
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cd4:	4935      	ldr	r1, [pc, #212]	@ (8000dac <HAL_GPIO_Init+0x2ec>)
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce2:	4b38      	ldr	r3, [pc, #224]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d06:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d30:	4a24      	ldr	r2, [pc, #144]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d84:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <HAL_GPIO_Init+0x304>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	f67f aea2 	bls.w	8000adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3724      	adds	r7, #36	@ 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40013c00 	.word	0x40013c00

08000dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000de4:	e003      	b.n	8000dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	041a      	lsls	r2, r3, #16
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e267      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d075      	beq.n	8000f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e4e:	4b88      	ldr	r3, [pc, #544]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d00c      	beq.n	8000e74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e5a:	4b85      	ldr	r3, [pc, #532]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d112      	bne.n	8000e8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e66:	4b82      	ldr	r3, [pc, #520]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e72:	d10b      	bne.n	8000e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	4b7e      	ldr	r3, [pc, #504]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d05b      	beq.n	8000f38 <HAL_RCC_OscConfig+0x108>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d157      	bne.n	8000f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e242      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e94:	d106      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x74>
 8000e96:	4b76      	ldr	r3, [pc, #472]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a75      	ldr	r2, [pc, #468]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e01d      	b.n	8000ee0 <HAL_RCC_OscConfig+0xb0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x98>
 8000eae:	4b70      	ldr	r3, [pc, #448]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6d      	ldr	r3, [pc, #436]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0xb0>
 8000ec8:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a68      	ldr	r2, [pc, #416]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b66      	ldr	r3, [pc, #408]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a65      	ldr	r2, [pc, #404]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fcf8 	bl	80008dc <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fcf4 	bl	80008dc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e207      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4b5b      	ldr	r3, [pc, #364]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xc0>
 8000f0e:	e014      	b.n	8000f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fce4 	bl	80008dc <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fce0 	bl	80008dc <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e1f3      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b51      	ldr	r3, [pc, #324]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0xe8>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d063      	beq.n	800100e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f46:	4b4a      	ldr	r3, [pc, #296]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f52:	4b47      	ldr	r3, [pc, #284]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d11c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f5e:	4b44      	ldr	r3, [pc, #272]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b41      	ldr	r3, [pc, #260]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x152>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e1c7      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4937      	ldr	r1, [pc, #220]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e03a      	b.n	800100e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d020      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_RCC_OscConfig+0x244>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc99 	bl	80008dc <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc95 	bl	80008dc <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e1a8      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4925      	ldr	r1, [pc, #148]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e015      	b.n	800100e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <HAL_RCC_OscConfig+0x244>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc78 	bl	80008dc <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc74 	bl	80008dc <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e187      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d036      	beq.n	8001088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d016      	beq.n	8001050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_RCC_OscConfig+0x248>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001028:	f7ff fc58 	bl	80008dc <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc54 	bl	80008dc <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e167      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_RCC_OscConfig+0x240>)
 8001044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x200>
 800104e:	e01b      	b.n	8001088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_RCC_OscConfig+0x248>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fc41 	bl	80008dc <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	e00e      	b.n	800107c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fc3d 	bl	80008dc <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d907      	bls.n	800107c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e150      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
 8001070:	40023800 	.word	0x40023800
 8001074:	42470000 	.word	0x42470000
 8001078:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107c:	4b88      	ldr	r3, [pc, #544]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800107e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1ea      	bne.n	800105e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8097 	beq.w	80011c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	4b81      	ldr	r3, [pc, #516]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b7d      	ldr	r3, [pc, #500]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a7c      	ldr	r2, [pc, #496]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	4b7a      	ldr	r3, [pc, #488]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	4b77      	ldr	r3, [pc, #476]	@ (80012a4 <HAL_RCC_OscConfig+0x474>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d2:	4b74      	ldr	r3, [pc, #464]	@ (80012a4 <HAL_RCC_OscConfig+0x474>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a73      	ldr	r2, [pc, #460]	@ (80012a4 <HAL_RCC_OscConfig+0x474>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010de:	f7ff fbfd 	bl	80008dc <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e6:	f7ff fbf9 	bl	80008dc <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e10c      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	4b6a      	ldr	r3, [pc, #424]	@ (80012a4 <HAL_RCC_OscConfig+0x474>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_RCC_OscConfig+0x2ea>
 800110c:	4b64      	ldr	r3, [pc, #400]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800110e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001110:	4a63      	ldr	r2, [pc, #396]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6713      	str	r3, [r2, #112]	@ 0x70
 8001118:	e01c      	b.n	8001154 <HAL_RCC_OscConfig+0x324>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b05      	cmp	r3, #5
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x30c>
 8001122:	4b5f      	ldr	r3, [pc, #380]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001126:	4a5e      	ldr	r2, [pc, #376]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6713      	str	r3, [r2, #112]	@ 0x70
 800112e:	4b5c      	ldr	r3, [pc, #368]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001132:	4a5b      	ldr	r2, [pc, #364]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6713      	str	r3, [r2, #112]	@ 0x70
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0x324>
 800113c:	4b58      	ldr	r3, [pc, #352]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800113e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001140:	4a57      	ldr	r2, [pc, #348]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	6713      	str	r3, [r2, #112]	@ 0x70
 8001148:	4b55      	ldr	r3, [pc, #340]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800114c:	4a54      	ldr	r2, [pc, #336]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800114e:	f023 0304 	bic.w	r3, r3, #4
 8001152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fbbe 	bl	80008dc <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	e00a      	b.n	800117a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff fbba 	bl	80008dc <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e0cb      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117a:	4b49      	ldr	r3, [pc, #292]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800117c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0ee      	beq.n	8001164 <HAL_RCC_OscConfig+0x334>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fba8 	bl	80008dc <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fba4 	bl	80008dc <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e0b5      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a6:	4b3e      	ldr	r3, [pc, #248]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ee      	bne.n	8001190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80011be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a1 	beq.w	8001310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011ce:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d05c      	beq.n	8001294 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d141      	bne.n	8001266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <HAL_RCC_OscConfig+0x478>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb78 	bl	80008dc <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff fb74 	bl	80008dc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e087      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001202:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69da      	ldr	r2, [r3, #28]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	3b01      	subs	r3, #1
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	491b      	ldr	r1, [pc, #108]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_RCC_OscConfig+0x478>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb4d 	bl	80008dc <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb49 	bl	80008dc <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e05c      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x416>
 8001264:	e054      	b.n	8001310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_RCC_OscConfig+0x478>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb36 	bl	80008dc <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fb32 	bl	80008dc <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e045      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_RCC_OscConfig+0x470>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x444>
 8001292:	e03d      	b.n	8001310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e038      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x4ec>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d028      	beq.n	800130c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d121      	bne.n	800130c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d11a      	bne.n	800130c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80012dc:	4013      	ands	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d111      	bne.n	800130c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	3b01      	subs	r3, #1
 80012f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fa64 	bl	80008dc <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fa60 	bl	80008dc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f821 	bl	80014ec <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	@ (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f9d8 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08002738 	.word	0x08002738
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f0:	b094      	sub	sp, #80	@ 0x50
 80014f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001504:	4b79      	ldr	r3, [pc, #484]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d00d      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x40>
 8001510:	2b08      	cmp	r3, #8
 8001512:	f200 80e1 	bhi.w	80016d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x34>
 800151a:	2b04      	cmp	r3, #4
 800151c:	d003      	beq.n	8001526 <HAL_RCC_GetSysClockFreq+0x3a>
 800151e:	e0db      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001520:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001524:	e0db      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001526:	4b73      	ldr	r3, [pc, #460]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800152a:	e0d8      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152c:	4b6f      	ldr	r3, [pc, #444]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001542:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	2200      	movs	r2, #0
 800154a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800154c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
 800155a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800155e:	4622      	mov	r2, r4
 8001560:	462b      	mov	r3, r5
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	0159      	lsls	r1, r3, #5
 800156c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001570:	0150      	lsls	r0, r2, #5
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4621      	mov	r1, r4
 8001578:	1a51      	subs	r1, r2, r1
 800157a:	6139      	str	r1, [r7, #16]
 800157c:	4629      	mov	r1, r5
 800157e:	eb63 0301 	sbc.w	r3, r3, r1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001590:	4659      	mov	r1, fp
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4651      	mov	r1, sl
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4651      	mov	r1, sl
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4651      	mov	r1, sl
 80015a0:	ebb2 0801 	subs.w	r8, r2, r1
 80015a4:	4659      	mov	r1, fp
 80015a6:	eb63 0901 	sbc.w	r9, r3, r1
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015be:	4690      	mov	r8, r2
 80015c0:	4699      	mov	r9, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	eb18 0303 	adds.w	r3, r8, r3
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	462b      	mov	r3, r5
 80015cc:	eb49 0303 	adc.w	r3, r9, r3
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015de:	4629      	mov	r1, r5
 80015e0:	024b      	lsls	r3, r1, #9
 80015e2:	4621      	mov	r1, r4
 80015e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015e8:	4621      	mov	r1, r4
 80015ea:	024a      	lsls	r2, r1, #9
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015f2:	2200      	movs	r2, #0
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015fc:	f7fe fdec 	bl	80001d8 <__aeabi_uldivmod>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4613      	mov	r3, r2
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001608:	e058      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	2200      	movs	r2, #0
 8001612:	4618      	mov	r0, r3
 8001614:	4611      	mov	r1, r2
 8001616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001624:	4642      	mov	r2, r8
 8001626:	464b      	mov	r3, r9
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0159      	lsls	r1, r3, #5
 8001632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001636:	0150      	lsls	r0, r2, #5
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4641      	mov	r1, r8
 800163e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001642:	4649      	mov	r1, r9
 8001644:	eb63 0b01 	sbc.w	fp, r3, r1
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800165c:	ebb2 040a 	subs.w	r4, r2, sl
 8001660:	eb63 050b 	sbc.w	r5, r3, fp
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	00eb      	lsls	r3, r5, #3
 800166e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001672:	00e2      	lsls	r2, r4, #3
 8001674:	4614      	mov	r4, r2
 8001676:	461d      	mov	r5, r3
 8001678:	4643      	mov	r3, r8
 800167a:	18e3      	adds	r3, r4, r3
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	464b      	mov	r3, r9
 8001680:	eb45 0303 	adc.w	r3, r5, r3
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001692:	4629      	mov	r1, r5
 8001694:	028b      	lsls	r3, r1, #10
 8001696:	4621      	mov	r1, r4
 8001698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800169c:	4621      	mov	r1, r4
 800169e:	028a      	lsls	r2, r1, #10
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a6:	2200      	movs	r2, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	61fa      	str	r2, [r7, #28]
 80016ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b0:	f7fe fd92 	bl	80001d8 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x200>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	3301      	adds	r3, #1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80016cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016d6:	e002      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3750      	adds	r7, #80	@ 0x50
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	007a1200 	.word	0x007a1200

080016f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f103 0208 	add.w	r2, r3, #8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f103 0208 	add.w	r2, r3, #8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f103 0208 	add.w	r2, r3, #8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d103      	bne.n	8001772 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e00c      	b.n	800178c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3308      	adds	r3, #8
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e002      	b.n	8001780 <vListInsert+0x2e>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	429a      	cmp	r2, r3
 800178a:	d2f6      	bcs.n	800177a <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6892      	ldr	r2, [r2, #8]
 80017da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6852      	ldr	r2, [r2, #4]
 80017e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d103      	bne.n	80017f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af04      	add	r7, sp, #16
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fede 	bl	80025ec <pvPortMalloc>
 8001830:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001838:	2054      	movs	r0, #84	@ 0x54
 800183a:	f000 fed7 	bl	80025ec <pvPortMalloc>
 800183e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001846:	2254      	movs	r2, #84	@ 0x54
 8001848:	2100      	movs	r1, #0
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f000 ff2c 	bl	80026a8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30
 8001856:	e005      	b.n	8001864 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001858:	6938      	ldr	r0, [r7, #16]
 800185a:	f000 ff1b 	bl	8002694 <vPortFree>
 800185e:	e001      	b.n	8001864 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800186a:	2300      	movs	r3, #0
 800186c:	9303      	str	r3, [sp, #12]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f828 	bl	80018d6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001886:	697b      	ldr	r3, [r7, #20]
    }
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ffb3 	bl	8001818 <prvCreateTask>
 80018b2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80018ba:	6938      	ldr	r0, [r7, #16]
 80018bc:	f000 f874 	bl	80019a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e002      	b.n	80018cc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80018cc:	697b      	ldr	r3, [r7, #20]
    }
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018ee:	3b01      	subs	r3, #1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f023 0307 	bic.w	r3, r3, #7
 80018fc:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01e      	beq.n	8001942 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e012      	b.n	8001930 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	4413      	add	r3, r2
 8001910:	7819      	ldrb	r1, [r3, #0]
 8001912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	3334      	adds	r3, #52	@ 0x34
 800191a:	460a      	mov	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	d9e9      	bls.n	800190a <prvInitialiseNewTask+0x34>
 8001936:	e000      	b.n	800193a <prvInitialiseNewTask+0x64>
            {
                break;
 8001938:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d901      	bls.n	800194c <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001948:	2304      	movs	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800194c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195a:	3304      	adds	r3, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff feeb 	bl	8001738 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001964:	3318      	adds	r3, #24
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fee6 	bl	8001738 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001970:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f1c3 0205 	rsb	r2, r3, #5
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	6938      	ldr	r0, [r7, #16]
 8001988:	f000 fcd4 	bl	8002334 <pxPortInitialiseStack>
 800198c:	4602      	mov	r2, r0
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800199c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80019b0:	f000 fd6e 	bl	8002490 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80019b4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab4 <prvAddNewTaskToReadyList+0x10c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab4 <prvAddNewTaskToReadyList+0x10c>)
 80019bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80019be:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <prvAddNewTaskToReadyList+0x110>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80019c6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab8 <prvAddNewTaskToReadyList+0x110>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019cc:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <prvAddNewTaskToReadyList+0x10c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d110      	bne.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80019d4:	f000 fb92 	bl	80020fc <prvInitialiseTaskLists>
 80019d8:	e00d      	b.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80019da:	4b38      	ldr	r3, [pc, #224]	@ (8001abc <prvAddNewTaskToReadyList+0x114>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019e2:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <prvAddNewTaskToReadyList+0x110>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d802      	bhi.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80019f0:	4a31      	ldr	r2, [pc, #196]	@ (8001ab8 <prvAddNewTaskToReadyList+0x110>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80019f6:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <prvAddNewTaskToReadyList+0x118>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <prvAddNewTaskToReadyList+0x118>)
 80019fe:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <prvAddNewTaskToReadyList+0x11c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <prvAddNewTaskToReadyList+0x11c>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a16:	492c      	ldr	r1, [pc, #176]	@ (8001ac8 <prvAddNewTaskToReadyList+0x120>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	3204      	adds	r2, #4
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <prvAddNewTaskToReadyList+0x120>)
 8001a56:	441a      	add	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a60:	4919      	ldr	r1, [pc, #100]	@ (8001ac8 <prvAddNewTaskToReadyList+0x120>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	4814      	ldr	r0, [pc, #80]	@ (8001ac8 <prvAddNewTaskToReadyList+0x120>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4403      	add	r3, r0
 8001a80:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001a82:	f000 fd1f 	bl	80024c4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <prvAddNewTaskToReadyList+0x114>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00e      	beq.n	8001aac <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <prvAddNewTaskToReadyList+0x110>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <prvAddNewTaskToReadyList+0x104>
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <prvAddNewTaskToReadyList+0x124>)
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000108 	.word	0x20000108
 8001ab8:	20000030 	.word	0x20000030
 8001abc:	20000114 	.word	0x20000114
 8001ac0:	20000124 	.word	0x20000124
 8001ac4:	20000110 	.word	0x20000110
 8001ac8:	20000034 	.word	0x20000034
 8001acc:	e000ed04 	.word	0xe000ed04

08001ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 8001ae2:	f000 f89d 	bl	8001c20 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fba1 	bl	8002230 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001aee:	f000 f8a5 	bl	8001c3c <xTaskResumeAll>
 8001af2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d107      	bne.n	8001b0a <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <vTaskDelay+0x44>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e011      	b.n	8001b5c <prvCreateIdleTasks+0x44>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001b38:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <prvCreateIdleTasks+0xa0>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	7819      	ldrb	r1, [r3, #0]
 8001b40:	463a      	mov	r2, r7
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4413      	add	r3, r2
 8001b46:	460a      	mov	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <prvCreateIdleTasks+0x4c>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b0e      	cmp	r3, #14
 8001b60:	d9ea      	bls.n	8001b38 <prvCreateIdleTasks+0x20>
 8001b62:	e000      	b.n	8001b66 <prvCreateIdleTasks+0x4e>
        {
            break;
 8001b64:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8001b66:	463a      	mov	r2, r7
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	e015      	b.n	8001ba2 <prvCreateIdleTasks+0x8a>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <prvCreateIdleTasks+0xa4>)
 8001b78:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <prvCreateIdleTasks+0xa8>)
 8001b80:	4413      	add	r3, r2
 8001b82:	4639      	mov	r1, r7
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	6938      	ldr	r0, [r7, #16]
 8001b90:	f7ff fe7e 	bl	8001890 <xTaskCreate>
 8001b94:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <prvCreateIdleTasks+0x92>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dde6      	ble.n	8001b76 <prvCreateIdleTasks+0x5e>
 8001ba8:	e000      	b.n	8001bac <prvCreateIdleTasks+0x94>
        {
            break;
 8001baa:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001bac:	69fb      	ldr	r3, [r7, #28]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08002730 	.word	0x08002730
 8001bbc:	080020cd 	.word	0x080020cd
 8001bc0:	2000012c 	.word	0x2000012c

08001bc4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001bca:	f7ff ffa5 	bl	8001b18 <prvCreateIdleTasks>
 8001bce:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d115      	bne.n	8001c02 <vTaskStartScheduler+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	603b      	str	r3, [r7, #0]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001be8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <vTaskStartScheduler+0x4c>)
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <vTaskStartScheduler+0x50>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <vTaskStartScheduler+0x54>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001bfe:	f000 fc0f 	bl	8002420 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <vTaskStartScheduler+0x58>)
 8001c04:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000128 	.word	0x20000128
 8001c14:	20000114 	.word	0x20000114
 8001c18:	2000010c 	.word	0x2000010c
 8001c1c:	08002748 	.word	0x08002748

08001c20 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <vTaskSuspendAll+0x18>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a03      	ldr	r2, [pc, #12]	@ (8001c38 <vTaskSuspendAll+0x18>)
 8001c2c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000130 	.word	0x20000130

08001c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001c4a:	f000 fc21 	bl	8002490 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001c52:	4b6d      	ldr	r3, [pc, #436]	@ (8001e08 <xTaskResumeAll+0x1cc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	4a6b      	ldr	r2, [pc, #428]	@ (8001e08 <xTaskResumeAll+0x1cc>)
 8001c5a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <xTaskResumeAll+0x1cc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 80ca 	bne.w	8001dfa <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c66:	4b69      	ldr	r3, [pc, #420]	@ (8001e0c <xTaskResumeAll+0x1d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80c5 	beq.w	8001dfa <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c70:	e08e      	b.n	8001d90 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c72:	4b67      	ldr	r3, [pc, #412]	@ (8001e10 <xTaskResumeAll+0x1d4>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	6a12      	ldr	r2, [r2, #32]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	69d2      	ldr	r2, [r2, #28]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d103      	bne.n	8001ca8 <xTaskResumeAll+0x6c>
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	68d2      	ldr	r2, [r2, #12]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	6892      	ldr	r2, [r2, #8]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d103      	bne.n	8001ce6 <xTaskResumeAll+0xaa>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <xTaskResumeAll+0x1d8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <xTaskResumeAll+0x1d8>)
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0c:	4942      	ldr	r1, [pc, #264]	@ (8001e18 <xTaskResumeAll+0x1dc>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3304      	adds	r3, #4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	3204      	adds	r2, #4
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	1d1a      	adds	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4a33      	ldr	r2, [pc, #204]	@ (8001e18 <xTaskResumeAll+0x1dc>)
 8001d4c:	441a      	add	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d56:	4930      	ldr	r1, [pc, #192]	@ (8001e18 <xTaskResumeAll+0x1dc>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	482b      	ldr	r0, [pc, #172]	@ (8001e18 <xTaskResumeAll+0x1dc>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4403      	add	r3, r0
 8001d76:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <xTaskResumeAll+0x1e0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d904      	bls.n	8001d90 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <xTaskResumeAll+0x1e4>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d90:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <xTaskResumeAll+0x1d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f af6c 	bne.w	8001c72 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001da0:	f000 fa2a 	bl	80021f8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <xTaskResumeAll+0x1e8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001db0:	f000 f83c 	bl	8001e2c <xTaskIncrementTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001dba:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <xTaskResumeAll+0x1e4>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ef      	bne.n	8001db0 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <xTaskResumeAll+0x1e8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <xTaskResumeAll+0x1e4>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <xTaskResumeAll+0x1e0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <xTaskResumeAll+0x1ec>)
 8001dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001dfa:	f000 fb63 	bl	80024c4 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000130 	.word	0x20000130
 8001e0c:	20000108 	.word	0x20000108
 8001e10:	200000c8 	.word	0x200000c8
 8001e14:	20000110 	.word	0x20000110
 8001e18:	20000034 	.word	0x20000034
 8001e1c:	20000030 	.word	0x20000030
 8001e20:	2000011c 	.word	0x2000011c
 8001e24:	20000118 	.word	0x20000118
 8001e28:	e000ed04 	.word	0xe000ed04

08001e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001e36:	4b76      	ldr	r3, [pc, #472]	@ (8002010 <xTaskIncrementTick+0x1e4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 80de 	bne.w	8001ffc <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e40:	4b74      	ldr	r3, [pc, #464]	@ (8002014 <xTaskIncrementTick+0x1e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001e48:	4a72      	ldr	r2, [pc, #456]	@ (8002014 <xTaskIncrementTick+0x1e8>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d110      	bne.n	8001e76 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e54:	4b70      	ldr	r3, [pc, #448]	@ (8002018 <xTaskIncrementTick+0x1ec>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	4b70      	ldr	r3, [pc, #448]	@ (800201c <xTaskIncrementTick+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8002018 <xTaskIncrementTick+0x1ec>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	@ (800201c <xTaskIncrementTick+0x1f0>)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b6d      	ldr	r3, [pc, #436]	@ (8002020 <xTaskIncrementTick+0x1f4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8002020 <xTaskIncrementTick+0x1f4>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	f000 f9c1 	bl	80021f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e76:	4b6b      	ldr	r3, [pc, #428]	@ (8002024 <xTaskIncrementTick+0x1f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f0c0 80a8 	bcc.w	8001fd2 <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e82:	4b65      	ldr	r3, [pc, #404]	@ (8002018 <xTaskIncrementTick+0x1ec>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001e8c:	4b65      	ldr	r3, [pc, #404]	@ (8002024 <xTaskIncrementTick+0x1f8>)
 8001e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e92:	601a      	str	r2, [r3, #0]
                    break;
 8001e94:	e09d      	b.n	8001fd2 <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e96:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <xTaskIncrementTick+0x1ec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d203      	bcs.n	8001eb6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001eae:	4a5d      	ldr	r2, [pc, #372]	@ (8002024 <xTaskIncrementTick+0x1f8>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6013      	str	r3, [r2, #0]
                        break;
 8001eb4:	e08d      	b.n	8001fd2 <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68d2      	ldr	r2, [r2, #12]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	6892      	ldr	r2, [r2, #8]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d103      	bne.n	8001ee4 <xTaskIncrementTick+0xb8>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	6a12      	ldr	r2, [r2, #32]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	69d2      	ldr	r2, [r2, #28]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	3318      	adds	r3, #24
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d103      	bne.n	8001f2a <xTaskIncrementTick+0xfe>
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	409a      	lsls	r2, r3
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <xTaskIncrementTick+0x1fc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <xTaskIncrementTick+0x1fc>)
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f50:	4936      	ldr	r1, [pc, #216]	@ (800202c <xTaskIncrementTick+0x200>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	3204      	adds	r2, #4
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1d1a      	adds	r2, r3, #4
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4a27      	ldr	r2, [pc, #156]	@ (800202c <xTaskIncrementTick+0x200>)
 8001f90:	441a      	add	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	615a      	str	r2, [r3, #20]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9a:	4924      	ldr	r1, [pc, #144]	@ (800202c <xTaskIncrementTick+0x200>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	481f      	ldr	r0, [pc, #124]	@ (800202c <xTaskIncrementTick+0x200>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <xTaskIncrementTick+0x204>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	f67f af5b 	bls.w	8001e82 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fd0:	e757      	b.n	8001e82 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <xTaskIncrementTick+0x204>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd8:	4914      	ldr	r1, [pc, #80]	@ (800202c <xTaskIncrementTick+0x200>)
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d901      	bls.n	8001fee <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001fee:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <xTaskIncrementTick+0x208>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e004      	b.n	8002006 <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <xTaskIncrementTick+0x20c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <xTaskIncrementTick+0x20c>)
 8002004:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002006:	69fb      	ldr	r3, [r7, #28]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000130 	.word	0x20000130
 8002014:	2000010c 	.word	0x2000010c
 8002018:	200000c0 	.word	0x200000c0
 800201c:	200000c4 	.word	0x200000c4
 8002020:	20000120 	.word	0x20000120
 8002024:	20000128 	.word	0x20000128
 8002028:	20000110 	.word	0x20000110
 800202c:	20000034 	.word	0x20000034
 8002030:	20000030 	.word	0x20000030
 8002034:	2000011c 	.word	0x2000011c
 8002038:	20000118 	.word	0x20000118

0800203c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <vTaskSwitchContext+0x7c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800204a:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <vTaskSwitchContext+0x80>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002050:	e02b      	b.n	80020aa <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <vTaskSwitchContext+0x80>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <vTaskSwitchContext+0x84>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f1c3 031f 	rsb	r3, r3, #31
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <vTaskSwitchContext+0x88>)
 800207a:	4413      	add	r3, r2
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3308      	adds	r3, #8
 8002090:	429a      	cmp	r2, r3
 8002092:	d103      	bne.n	800209c <vTaskSwitchContext+0x60>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a09      	ldr	r2, [pc, #36]	@ (80020c8 <vTaskSwitchContext+0x8c>)
 80020a4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <vTaskSwitchContext+0x8c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
    }
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000130 	.word	0x20000130
 80020bc:	2000011c 	.word	0x2000011c
 80020c0:	20000110 	.word	0x20000110
 80020c4:	20000034 	.word	0x20000034
 80020c8:	20000030 	.word	0x20000030

080020cc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80020d4:	f000 f852 	bl	800217c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <prvIdleTask+0x28>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d9f9      	bls.n	80020d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <prvIdleTask+0x2c>)
 80020e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80020f0:	e7f0      	b.n	80020d4 <prvIdleTask+0x8>
 80020f2:	bf00      	nop
 80020f4:	20000034 	.word	0x20000034
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e00c      	b.n	8002122 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <prvInitialiseTaskLists+0x60>)
 8002114:	4413      	add	r3, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff faee 	bl	80016f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d9ef      	bls.n	8002108 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002128:	480d      	ldr	r0, [pc, #52]	@ (8002160 <prvInitialiseTaskLists+0x64>)
 800212a:	f7ff fae5 	bl	80016f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800212e:	480d      	ldr	r0, [pc, #52]	@ (8002164 <prvInitialiseTaskLists+0x68>)
 8002130:	f7ff fae2 	bl	80016f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002134:	480c      	ldr	r0, [pc, #48]	@ (8002168 <prvInitialiseTaskLists+0x6c>)
 8002136:	f7ff fadf 	bl	80016f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800213a:	480c      	ldr	r0, [pc, #48]	@ (800216c <prvInitialiseTaskLists+0x70>)
 800213c:	f7ff fadc 	bl	80016f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002140:	480b      	ldr	r0, [pc, #44]	@ (8002170 <prvInitialiseTaskLists+0x74>)
 8002142:	f7ff fad9 	bl	80016f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <prvInitialiseTaskLists+0x78>)
 8002148:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <prvInitialiseTaskLists+0x64>)
 800214a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <prvInitialiseTaskLists+0x7c>)
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <prvInitialiseTaskLists+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000034 	.word	0x20000034
 8002160:	20000098 	.word	0x20000098
 8002164:	200000ac 	.word	0x200000ac
 8002168:	200000c8 	.word	0x200000c8
 800216c:	200000dc 	.word	0x200000dc
 8002170:	200000f4 	.word	0x200000f4
 8002174:	200000c0 	.word	0x200000c0
 8002178:	200000c4 	.word	0x200000c4

0800217c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002182:	e019      	b.n	80021b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002184:	f000 f984 	bl	8002490 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <prvCheckTasksWaitingTermination+0x50>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fb15 	bl	80017c4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <prvCheckTasksWaitingTermination+0x54>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <prvCheckTasksWaitingTermination+0x54>)
 80021a2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021ac:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80021ae:	f000 f989 	bl	80024c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f810 	bl	80021d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <prvCheckTasksWaitingTermination+0x58>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e1      	bne.n	8002184 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200000dc 	.word	0x200000dc
 80021d0:	20000108 	.word	0x20000108
 80021d4:	200000f0 	.word	0x200000f0

080021d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fa55 	bl	8002694 <vPortFree>
            vPortFree( pxTCB );
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fa52 	bl	8002694 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <prvResetNextTaskUnblockTime+0x30>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <prvResetNextTaskUnblockTime+0x34>)
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800220e:	e005      	b.n	800221c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <prvResetNextTaskUnblockTime+0x30>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a04      	ldr	r2, [pc, #16]	@ (800222c <prvResetNextTaskUnblockTime+0x34>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200000c0 	.word	0x200000c0
 800222c:	20000128 	.word	0x20000128

08002230 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800223a:	4b37      	ldr	r3, [pc, #220]	@ (8002318 <prvAddCurrentTaskToDelayedList+0xe8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <prvAddCurrentTaskToDelayedList+0xec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002246:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fab6 	bl	80017c4 <uxListRemove>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800225e:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	2201      	movs	r2, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <prvAddCurrentTaskToDelayedList+0xf8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4013      	ands	r3, r2
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002274:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d124      	bne.n	80022c8 <prvAddCurrentTaskToDelayedList+0x98>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d021      	beq.n	80022c8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	3204      	adds	r2, #4
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <prvAddCurrentTaskToDelayedList+0xfc>)
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <prvAddCurrentTaskToDelayedList+0xfc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <prvAddCurrentTaskToDelayedList+0xfc>)
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80022c6:	e022      	b.n	800230e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d207      	bcs.n	80022f0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3304      	adds	r3, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7ff fa32 	bl	8001752 <vListInsert>
}
 80022ee:	e00e      	b.n	800230e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <prvAddCurrentTaskToDelayedList+0xf4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3304      	adds	r3, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	69b8      	ldr	r0, [r7, #24]
 80022fa:	f7ff fa2a 	bl	8001752 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <prvAddCurrentTaskToDelayedList+0x100>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d202      	bcs.n	800230e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002308:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <prvAddCurrentTaskToDelayedList+0x100>)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000010c 	.word	0x2000010c
 800231c:	200000c0 	.word	0x200000c0
 8002320:	200000c4 	.word	0x200000c4
 8002324:	20000030 	.word	0x20000030
 8002328:	20000110 	.word	0x20000110
 800232c:	200000f4 	.word	0x200000f4
 8002330:	20000128 	.word	0x20000128

08002334 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b04      	subs	r3, #4
 8002344:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800234c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3b04      	subs	r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f023 0201 	bic.w	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3b04      	subs	r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002364:	4a0c      	ldr	r2, [pc, #48]	@ (8002398 <pxPortInitialiseStack+0x64>)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b14      	subs	r3, #20
 800236e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b04      	subs	r3, #4
 800237a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f06f 0202 	mvn.w	r2, #2
 8002382:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3b20      	subs	r3, #32
 8002388:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	0800239d 	.word	0x0800239d

0800239c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	607b      	str	r3, [r7, #4]
}
 80023b8:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80023ba:	bf00      	nop
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0fc      	beq.n	80023bc <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <vPortSVCHandler+0x1c>)
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	6808      	ldr	r0, [r1, #0]
 80023d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023da:	f380 8809 	msr	PSP, r0
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f380 8811 	msr	BASEPRI, r0
 80023ea:	4770      	bx	lr
 80023ec:	20000030 	.word	0x20000030
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop

080023f4 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80023f4:	4808      	ldr	r0, [pc, #32]	@ (8002418 <prvPortStartFirstTask+0x24>)
 80023f6:	6800      	ldr	r0, [r0, #0]
 80023f8:	6800      	ldr	r0, [r0, #0]
 80023fa:	f380 8808 	msr	MSP, r0
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f380 8814 	msr	CONTROL, r0
 8002406:	b662      	cpsie	i
 8002408:	b661      	cpsie	f
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	df00      	svc	0
 8002414:	bf00      	nop
 8002416:	0000      	.short	0x0000
 8002418:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop

08002420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <xPortStartScheduler+0x5c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800242c:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <xPortStartScheduler+0x60>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a13      	ldr	r2, [pc, #76]	@ (8002480 <xPortStartScheduler+0x60>)
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002436:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <xPortStartScheduler+0x60>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a10      	ldr	r2, [pc, #64]	@ (8002480 <xPortStartScheduler+0x60>)
 800243e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002442:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002444:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <xPortStartScheduler+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800244a:	f000 f8a9 	bl	80025a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <xPortStartScheduler+0x68>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002454:	f000 f8be 	bl	80025d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <xPortStartScheduler+0x6c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <xPortStartScheduler+0x6c>)
 800245e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002462:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002464:	f7ff ffc6 	bl	80023f4 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002468:	f7ff fde8 	bl	800203c <vTaskSwitchContext>
    prvTaskExitError();
 800246c:	f7ff ff96 	bl	800239c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000ed08 	.word	0xe000ed08
 8002480:	e000ed20 	.word	0xe000ed20
 8002484:	e000ed1c 	.word	0xe000ed1c
 8002488:	2000000c 	.word	0x2000000c
 800248c:	e000ef34 	.word	0xe000ef34

08002490 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
    __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	607b      	str	r3, [r7, #4]
}
 80024a8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <vPortEnterCritical+0x30>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a03      	ldr	r2, [pc, #12]	@ (80024c0 <vPortEnterCritical+0x30>)
 80024b2:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	2000000c 	.word	0x2000000c

080024c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <vPortExitCritical+0x30>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <vPortExitCritical+0x30>)
 80024d2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <vPortExitCritical+0x30>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <vPortExitCritical+0x24>
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80024e6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80024f8:	f3ef 8009 	mrs	r0, PSP
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <xPortPendSVHandler+0x5c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f01e 0f10 	tst.w	lr, #16
 8002508:	bf08      	it	eq
 800250a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800250e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002512:	6010      	str	r0, [r2, #0]
 8002514:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002518:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800251c:	f380 8811 	msr	BASEPRI, r0
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f7ff fd88 	bl	800203c <vTaskSwitchContext>
 800252c:	f04f 0000 	mov.w	r0, #0
 8002530:	f380 8811 	msr	BASEPRI, r0
 8002534:	bc09      	pop	{r0, r3}
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	6808      	ldr	r0, [r1, #0]
 800253a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253e:	f01e 0f10 	tst.w	lr, #16
 8002542:	bf08      	it	eq
 8002544:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002548:	f380 8809 	msr	PSP, r0
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	4770      	bx	lr
 8002552:	0000      	.short	0x0000
 8002554:	20000030 	.word	0x20000030
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop

0800255c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
    __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	607b      	str	r3, [r7, #4]
}
 8002574:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002576:	f7ff fc59 	bl	8001e2c <xTaskIncrementTick>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <xPortSysTickHandler+0x40>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	2300      	movs	r3, #0
 800258a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f383 8811 	msr	BASEPRI, r3
}
 8002592:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <vPortSetupTimerInterrupt+0x28>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <vPortSetupTimerInterrupt+0x2c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025b0:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <vPortSetupTimerInterrupt+0x30>)
 80025b2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80025b6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <vPortSetupTimerInterrupt+0x28>)
 80025ba:	2207      	movs	r2, #7
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e010 	.word	0xe000e010
 80025cc:	e000e018 	.word	0xe000e018
 80025d0:	e000e014 	.word	0xe000e014

080025d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80025d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80025e4 <vPortEnableVFP+0x10>
 80025d8:	6801      	ldr	r1, [r0, #0]
 80025da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80025de:	6001      	str	r1, [r0, #0]
 80025e0:	4770      	bx	lr
 80025e2:	0000      	.short	0x0000
 80025e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop

080025ec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        size_t xAdditionalRequiredSize;

        if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <pvPortMalloc+0x3a>
        {
            /* Byte alignment required. */
            xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	f1c3 0308 	rsb	r3, r3, #8
 800260c:	60bb      	str	r3, [r7, #8]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	43db      	mvns	r3, r3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d804      	bhi.n	8002622 <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e001      	b.n	8002626 <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002626:	f7ff fafb 	bl	8001c20 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <pvPortMalloc+0x9c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <pvPortMalloc+0x52>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &( ucHeap[ portBYTE_ALIGNMENT - 1 ] ) ) &
 8002632:	4b16      	ldr	r3, [pc, #88]	@ (800268c <pvPortMalloc+0xa0>)
 8002634:	f023 0307 	bic.w	r3, r3, #7
 8002638:	461a      	mov	r2, r3
 800263a:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <pvPortMalloc+0x9c>)
 800263c:	601a      	str	r2, [r3, #0]
                                             ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation. */
        if( ( xWantedSize > 0 ) &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d019      	beq.n	8002678 <pvPortMalloc+0x8c>
            ( heapADD_WILL_OVERFLOW( xNextFreeByte, xWantedSize ) == 0 ) &&
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	43da      	mvns	r2, r3
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <pvPortMalloc+0xa4>)
 800264a:	681b      	ldr	r3, [r3, #0]
        if( ( xWantedSize > 0 ) &&
 800264c:	429a      	cmp	r2, r3
 800264e:	d313      	bcc.n	8002678 <pvPortMalloc+0x8c>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) )
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <pvPortMalloc+0xa4>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4413      	add	r3, r2
            ( heapADD_WILL_OVERFLOW( xNextFreeByte, xWantedSize ) == 0 ) &&
 8002658:	f244 32f7 	movw	r2, #17399	@ 0x43f7
 800265c:	4293      	cmp	r3, r2
 800265e:	d80b      	bhi.n	8002678 <pvPortMalloc+0x8c>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <pvPortMalloc+0x9c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <pvPortMalloc+0xa4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800266c:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <pvPortMalloc+0xa4>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	4a06      	ldr	r2, [pc, #24]	@ (8002690 <pvPortMalloc+0xa4>)
 8002676:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002678:	f7ff fae0 	bl	8001c3c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20004538 	.word	0x20004538
 800268c:	2000013b 	.word	0x2000013b
 8002690:	20004534 	.word	0x20004534

08002694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <memset>:
 80026a8:	4402      	add	r2, r0
 80026aa:	4603      	mov	r3, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <__libc_init_array>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4d0d      	ldr	r5, [pc, #52]	@ (80026f0 <__libc_init_array+0x38>)
 80026bc:	4c0d      	ldr	r4, [pc, #52]	@ (80026f4 <__libc_init_array+0x3c>)
 80026be:	1b64      	subs	r4, r4, r5
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	2600      	movs	r6, #0
 80026c4:	42a6      	cmp	r6, r4
 80026c6:	d109      	bne.n	80026dc <__libc_init_array+0x24>
 80026c8:	4d0b      	ldr	r5, [pc, #44]	@ (80026f8 <__libc_init_array+0x40>)
 80026ca:	4c0c      	ldr	r4, [pc, #48]	@ (80026fc <__libc_init_array+0x44>)
 80026cc:	f000 f818 	bl	8002700 <_init>
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	2600      	movs	r6, #0
 80026d6:	42a6      	cmp	r6, r4
 80026d8:	d105      	bne.n	80026e6 <__libc_init_array+0x2e>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e0:	4798      	blx	r3
 80026e2:	3601      	adds	r6, #1
 80026e4:	e7ee      	b.n	80026c4 <__libc_init_array+0xc>
 80026e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ea:	4798      	blx	r3
 80026ec:	3601      	adds	r6, #1
 80026ee:	e7f2      	b.n	80026d6 <__libc_init_array+0x1e>
 80026f0:	08002754 	.word	0x08002754
 80026f4:	08002754 	.word	0x08002754
 80026f8:	08002754 	.word	0x08002754
 80026fc:	08002758 	.word	0x08002758

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
